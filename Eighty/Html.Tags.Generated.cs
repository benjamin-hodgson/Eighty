#region GeneratedCode
using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace Eighty
{
    public abstract partial class Html
    {
        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string xmlns = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (xmlns != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (xmlns != null)
            {
                builder.Add(new Attr("xmlns", xmlns));
            }

            return new TagBuilder("html", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(params Attr[] attrs)
        {
            return html(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("html", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1, Attr attr2)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an html element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder html(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("html", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(params Html[] children)
        {
            return html_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(List<Html> children)
        {
            return html_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(ImmutableList<Html> children)
        {
            return html_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return html_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an html element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html html_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("html", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("head", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(params Attr[] attrs)
        {
            return head(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("head", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1, Attr attr2)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a head element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder head(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("head", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(params Html[] children)
        {
            return head_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(List<Html> children)
        {
            return head_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(ImmutableList<Html> children)
        {
            return head_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return head_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a head element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html head_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("head", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("body", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(params Attr[] attrs)
        {
            return body(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("body", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1, Attr attr2)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a body element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder body(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("body", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(params Html[] children)
        {
            return body_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(List<Html> children)
        {
            return body_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(ImmutableList<Html> children)
        {
            return body_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return body_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a body element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html body_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("body", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string crossorigin = null,
            string rel = null,
            string href = null,
            string type = null,
            string media = null,
            string sizes = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (crossorigin != null)
            {
                attrCount++;
            }
            if (rel != null)
            {
                attrCount++;
            }
            if (href != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (media != null)
            {
                attrCount++;
            }
            if (sizes != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (crossorigin != null)
            {
                builder.Add(new Attr("crossorigin", crossorigin));
            }
            if (rel != null)
            {
                builder.Add(new Attr("rel", rel));
            }
            if (href != null)
            {
                builder.Add(new Attr("href", href));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (media != null)
            {
                builder.Add(new Attr("media", media));
            }
            if (sizes != null)
            {
                builder.Add(new Attr("sizes", sizes));
            }

            return new SelfClosingTag("link", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(params Attr[] attrs)
            => link(attrs.AsEnumerable());

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("link", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a link element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html link(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("link", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string href = null,
            string target = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (href != null)
            {
                attrCount++;
            }
            if (target != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (href != null)
            {
                builder.Add(new Attr("href", href));
            }
            if (target != null)
            {
                builder.Add(new Attr("target", target));
            }

            return new SelfClosingTag("base", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(params Attr[] attrs)
            => @base(attrs.AsEnumerable());

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("base", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a base element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @base(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("base", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string charset = null,
            string target = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (charset != null)
            {
                attrCount++;
            }
            if (target != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (charset != null)
            {
                builder.Add(new Attr("charset", charset));
            }
            if (target != null)
            {
                builder.Add(new Attr("target", target));
            }

            return new SelfClosingTag("meta", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(params Attr[] attrs)
            => meta(attrs.AsEnumerable());

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("meta", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a meta element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meta(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("meta", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            string media = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (media != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (media != null)
            {
                builder.Add(new Attr("media", media));
            }

            return new TagBuilder("style", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(params Attr[] attrs)
        {
            return style(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("style", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1, Attr attr2)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a style element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder style(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("style", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(params Html[] children)
        {
            return style_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(List<Html> children)
        {
            return style_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(ImmutableList<Html> children)
        {
            return style_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return style_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a style element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html style_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("style", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("title", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(params Attr[] attrs)
        {
            return title(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("title", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1, Attr attr2)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a title element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder title(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("title", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(params Html[] children)
        {
            return title_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(List<Html> children)
        {
            return title_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(ImmutableList<Html> children)
        {
            return title_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return title_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a title element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html title_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("title", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            string src = null,
            string crossorigin = null,
            bool async = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (crossorigin != null)
            {
                attrCount++;
            }
            if (async)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (crossorigin != null)
            {
                builder.Add(new Attr("crossorigin", crossorigin));
            }
            if (async)
            {
                builder.Add(new Attr("async"));
            }

            return new TagBuilder("script", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(params Attr[] attrs)
        {
            return script(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("script", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1, Attr attr2)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a script element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder script(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("script", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(params Html[] children)
        {
            return script_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(List<Html> children)
        {
            return script_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(ImmutableList<Html> children)
        {
            return script_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return script_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a script element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html script_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("script", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("noscript", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(params Attr[] attrs)
        {
            return noscript(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("noscript", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1, Attr attr2)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a noscript element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder noscript(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("noscript", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(params Html[] children)
        {
            return noscript_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(List<Html> children)
        {
            return noscript_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(ImmutableList<Html> children)
        {
            return noscript_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return noscript_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a noscript element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html noscript_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("noscript", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("main", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(params Attr[] attrs)
        {
            return main(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("main", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1, Attr attr2)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a main element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder main(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("main", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(params Html[] children)
        {
            return main_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(List<Html> children)
        {
            return main_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(ImmutableList<Html> children)
        {
            return main_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return main_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a main element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html main_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("main", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("header", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(params Attr[] attrs)
        {
            return header(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("header", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1, Attr attr2)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a header element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder header(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("header", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(params Html[] children)
        {
            return header_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(List<Html> children)
        {
            return header_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(ImmutableList<Html> children)
        {
            return header_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return header_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a header element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html header_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("header", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("article", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(params Attr[] attrs)
        {
            return article(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("article", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1, Attr attr2)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an article element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder article(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("article", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(params Html[] children)
        {
            return article_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(List<Html> children)
        {
            return article_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(ImmutableList<Html> children)
        {
            return article_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return article_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an article element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html article_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("article", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("section", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(params Attr[] attrs)
        {
            return section(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("section", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1, Attr attr2)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a section element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder section(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("section", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(params Html[] children)
        {
            return section_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(List<Html> children)
        {
            return section_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(ImmutableList<Html> children)
        {
            return section_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return section_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a section element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html section_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("section", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("footer", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(params Attr[] attrs)
        {
            return footer(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("footer", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1, Attr attr2)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a footer element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder footer(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("footer", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(params Html[] children)
        {
            return footer_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(List<Html> children)
        {
            return footer_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(ImmutableList<Html> children)
        {
            return footer_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return footer_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a footer element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html footer_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("footer", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("h1", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(params Attr[] attrs)
        {
            return h1(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("h1", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1, Attr attr2)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an h1 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h1(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("h1", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(params Html[] children)
        {
            return h1_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(List<Html> children)
        {
            return h1_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(ImmutableList<Html> children)
        {
            return h1_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return h1_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an h1 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h1_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("h1", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("h2", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(params Attr[] attrs)
        {
            return h2(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("h2", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1, Attr attr2)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an h2 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h2(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("h2", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(params Html[] children)
        {
            return h2_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(List<Html> children)
        {
            return h2_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(ImmutableList<Html> children)
        {
            return h2_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return h2_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an h2 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h2_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("h2", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("h3", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(params Attr[] attrs)
        {
            return h3(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("h3", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1, Attr attr2)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an h3 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h3(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("h3", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(params Html[] children)
        {
            return h3_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(List<Html> children)
        {
            return h3_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(ImmutableList<Html> children)
        {
            return h3_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return h3_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an h3 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h3_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("h3", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("h4", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(params Attr[] attrs)
        {
            return h4(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("h4", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1, Attr attr2)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an h4 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h4(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("h4", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(params Html[] children)
        {
            return h4_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(List<Html> children)
        {
            return h4_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(ImmutableList<Html> children)
        {
            return h4_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return h4_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an h4 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h4_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("h4", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("h5", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(params Attr[] attrs)
        {
            return h5(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("h5", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1, Attr attr2)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an h5 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h5(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("h5", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(params Html[] children)
        {
            return h5_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(List<Html> children)
        {
            return h5_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(ImmutableList<Html> children)
        {
            return h5_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return h5_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an h5 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h5_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("h5", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("h6", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(params Attr[] attrs)
        {
            return h6(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("h6", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1, Attr attr2)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an h6 element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder h6(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("h6", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(params Html[] children)
        {
            return h6_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(List<Html> children)
        {
            return h6_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(ImmutableList<Html> children)
        {
            return h6_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return h6_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an h6 element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html h6_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("h6", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("hgroup", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(params Attr[] attrs)
        {
            return hgroup(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("hgroup", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1, Attr attr2)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a hgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder hgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("hgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(params Html[] children)
        {
            return hgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(List<Html> children)
        {
            return hgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(ImmutableList<Html> children)
        {
            return hgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return hgroup_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a hgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("hgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("div", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(params Attr[] attrs)
        {
            return div(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("div", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1, Attr attr2)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a div element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder div(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("div", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(params Html[] children)
        {
            return div_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(List<Html> children)
        {
            return div_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(ImmutableList<Html> children)
        {
            return div_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return div_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a div element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html div_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("div", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("p", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(params Attr[] attrs)
        {
            return p(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("p", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1, Attr attr2)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a p element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder p(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("p", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(params Html[] children)
        {
            return p_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(List<Html> children)
        {
            return p_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(ImmutableList<Html> children)
        {
            return p_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return p_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a p element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html p_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("p", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("pre", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(params Attr[] attrs)
        {
            return pre(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("pre", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1, Attr attr2)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a pre element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder pre(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("pre", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(params Html[] children)
        {
            return pre_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(List<Html> children)
        {
            return pre_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(ImmutableList<Html> children)
        {
            return pre_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return pre_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a pre element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html pre_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("pre", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("blockquote", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(params Attr[] attrs)
        {
            return blockquote(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("blockquote", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1, Attr attr2)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a blockquote element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder blockquote(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("blockquote", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(params Html[] children)
        {
            return blockquote_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(List<Html> children)
        {
            return blockquote_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(ImmutableList<Html> children)
        {
            return blockquote_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return blockquote_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a blockquote element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html blockquote_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("blockquote", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("figure", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(params Attr[] attrs)
        {
            return figure(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("figure", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1, Attr attr2)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a figure element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figure(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("figure", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(params Html[] children)
        {
            return figure_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(List<Html> children)
        {
            return figure_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(ImmutableList<Html> children)
        {
            return figure_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return figure_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a figure element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figure_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("figure", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("figcaption", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(params Attr[] attrs)
        {
            return figcaption(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("figcaption", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1, Attr attr2)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a figcaption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder figcaption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("figcaption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(params Html[] children)
        {
            return figcaption_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(List<Html> children)
        {
            return figcaption_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(ImmutableList<Html> children)
        {
            return figcaption_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return figcaption_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a figcaption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html figcaption_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("figcaption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("aside", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(params Attr[] attrs)
        {
            return aside(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("aside", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1, Attr attr2)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an aside element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder aside(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("aside", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(params Html[] children)
        {
            return aside_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(List<Html> children)
        {
            return aside_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(ImmutableList<Html> children)
        {
            return aside_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return aside_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an aside element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html aside_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("aside", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("nav", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(params Attr[] attrs)
        {
            return nav(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("nav", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1, Attr attr2)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a nav element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder nav(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("nav", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(params Html[] children)
        {
            return nav_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(List<Html> children)
        {
            return nav_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(ImmutableList<Html> children)
        {
            return nav_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return nav_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a nav element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html nav_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("nav", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("address", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(params Attr[] attrs)
        {
            return address(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("address", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1, Attr attr2)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an address element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder address(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("address", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(params Html[] children)
        {
            return address_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(List<Html> children)
        {
            return address_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(ImmutableList<Html> children)
        {
            return address_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return address_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an address element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html address_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("address", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string href = null,
            string rel = null,
            string target = null,
            string type = null,
            string download = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (href != null)
            {
                attrCount++;
            }
            if (rel != null)
            {
                attrCount++;
            }
            if (target != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (download != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (href != null)
            {
                builder.Add(new Attr("href", href));
            }
            if (rel != null)
            {
                builder.Add(new Attr("rel", rel));
            }
            if (target != null)
            {
                builder.Add(new Attr("target", target));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (download != null)
            {
                builder.Add(new Attr("download", download));
            }

            return new TagBuilder("a", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(params Attr[] attrs)
        {
            return a(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("a", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1, Attr attr2)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an a element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder a(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("a", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(params Html[] children)
        {
            return a_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(List<Html> children)
        {
            return a_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(ImmutableList<Html> children)
        {
            return a_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return a_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an a element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html a_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("a", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("b", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(params Attr[] attrs)
        {
            return b(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("b", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1, Attr attr2)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a b element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder b(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("b", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(params Html[] children)
        {
            return b_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(List<Html> children)
        {
            return b_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(ImmutableList<Html> children)
        {
            return b_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return b_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a b element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html b_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("b", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("em", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(params Attr[] attrs)
        {
            return em(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("em", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1, Attr attr2)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an em element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder em(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("em", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(params Html[] children)
        {
            return em_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(List<Html> children)
        {
            return em_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(ImmutableList<Html> children)
        {
            return em_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return em_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an em element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html em_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("em", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("i", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(params Attr[] attrs)
        {
            return i(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("i", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1, Attr attr2)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an i element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder i(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("i", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(params Html[] children)
        {
            return i_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(List<Html> children)
        {
            return i_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(ImmutableList<Html> children)
        {
            return i_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return i_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an i element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html i_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("i", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("mark", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(params Attr[] attrs)
        {
            return mark(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("mark", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1, Attr attr2)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a mark element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder mark(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("mark", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(params Html[] children)
        {
            return mark_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(List<Html> children)
        {
            return mark_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(ImmutableList<Html> children)
        {
            return mark_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return mark_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a mark element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html mark_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("mark", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string cite = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (cite != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (cite != null)
            {
                builder.Add(new Attr("cite", cite));
            }

            return new TagBuilder("q", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(params Attr[] attrs)
        {
            return q(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("q", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1, Attr attr2)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a q element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder q(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("q", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(params Html[] children)
        {
            return q_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(List<Html> children)
        {
            return q_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(ImmutableList<Html> children)
        {
            return q_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return q_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a q element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html q_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("q", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("s", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(params Attr[] attrs)
        {
            return s(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("s", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1, Attr attr2)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an s element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder s(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("s", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(params Html[] children)
        {
            return s_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(List<Html> children)
        {
            return s_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(ImmutableList<Html> children)
        {
            return s_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return s_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an s element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html s_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("s", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("small", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(params Attr[] attrs)
        {
            return small(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("small", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1, Attr attr2)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a small element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder small(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("small", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(params Html[] children)
        {
            return small_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(List<Html> children)
        {
            return small_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(ImmutableList<Html> children)
        {
            return small_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return small_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a small element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html small_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("small", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("span", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(params Attr[] attrs)
        {
            return span(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("span", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1, Attr attr2)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a span element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder span(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("span", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(params Html[] children)
        {
            return span_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(List<Html> children)
        {
            return span_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(ImmutableList<Html> children)
        {
            return span_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return span_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a span element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html span_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("span", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("strong", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(params Attr[] attrs)
        {
            return strong(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("strong", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1, Attr attr2)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a strong element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder strong(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("strong", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(params Html[] children)
        {
            return strong_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(List<Html> children)
        {
            return strong_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(ImmutableList<Html> children)
        {
            return strong_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return strong_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a strong element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html strong_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("strong", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("sub", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(params Attr[] attrs)
        {
            return sub(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("sub", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1, Attr attr2)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a sub element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sub(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("sub", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(params Html[] children)
        {
            return sub_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(List<Html> children)
        {
            return sub_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(ImmutableList<Html> children)
        {
            return sub_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return sub_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a sub element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sub_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("sub", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("sup", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(params Attr[] attrs)
        {
            return sup(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("sup", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1, Attr attr2)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a sup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder sup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("sup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(params Html[] children)
        {
            return sup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(List<Html> children)
        {
            return sup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(ImmutableList<Html> children)
        {
            return sup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return sup_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a sup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html sup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("sup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("u", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(params Attr[] attrs)
        {
            return u(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("u", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1, Attr attr2)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an u element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder u(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("u", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(params Html[] children)
        {
            return u_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(List<Html> children)
        {
            return u_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(ImmutableList<Html> children)
        {
            return u_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return u_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an u element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html u_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("u", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new SelfClosingTag("br", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(params Attr[] attrs)
            => br(attrs.AsEnumerable());

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("br", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a br element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html br(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("br", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new SelfClosingTag("wbr", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(params Attr[] attrs)
            => wbr(attrs.AsEnumerable());

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("wbr", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a wbr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html wbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("wbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new SelfClosingTag("hr", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(params Attr[] attrs)
            => hr(attrs.AsEnumerable());

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("hr", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an hr element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html hr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("hr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("abbr", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(params Attr[] attrs)
        {
            return abbr(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("abbr", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1, Attr attr2)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an abbr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder abbr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("abbr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(params Html[] children)
        {
            return abbr_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(List<Html> children)
        {
            return abbr_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(ImmutableList<Html> children)
        {
            return abbr_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return abbr_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an abbr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html abbr_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("abbr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("cite", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(params Attr[] attrs)
        {
            return cite(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("cite", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1, Attr attr2)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a cite element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder cite(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("cite", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(params Html[] children)
        {
            return cite_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(List<Html> children)
        {
            return cite_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(ImmutableList<Html> children)
        {
            return cite_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return cite_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a cite element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html cite_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("cite", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("code", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(params Attr[] attrs)
        {
            return code(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("code", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1, Attr attr2)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a code element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder code(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("code", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(params Html[] children)
        {
            return code_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(List<Html> children)
        {
            return code_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(ImmutableList<Html> children)
        {
            return code_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return code_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a code element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html code_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("code", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string value = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }

            return new TagBuilder("data", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(params Attr[] attrs)
        {
            return data(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("data", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1, Attr attr2)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a data element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder data(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("data", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(params Html[] children)
        {
            return data_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(List<Html> children)
        {
            return data_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(ImmutableList<Html> children)
        {
            return data_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return data_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a data element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html data_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("data", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("dfn", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(params Attr[] attrs)
        {
            return dfn(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("dfn", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1, Attr attr2)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a dfn element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dfn(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("dfn", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(params Html[] children)
        {
            return dfn_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(List<Html> children)
        {
            return dfn_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(ImmutableList<Html> children)
        {
            return dfn_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return dfn_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a dfn element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dfn_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("dfn", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("kbd", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(params Attr[] attrs)
        {
            return kbd(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("kbd", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1, Attr attr2)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a kbd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder kbd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("kbd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(params Html[] children)
        {
            return kbd_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(List<Html> children)
        {
            return kbd_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(ImmutableList<Html> children)
        {
            return kbd_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return kbd_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a kbd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html kbd_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("kbd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("samp", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(params Attr[] attrs)
        {
            return samp(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("samp", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1, Attr attr2)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a samp element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder samp(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("samp", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(params Html[] children)
        {
            return samp_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(List<Html> children)
        {
            return samp_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(ImmutableList<Html> children)
        {
            return samp_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return samp_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a samp element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html samp_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("samp", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string datetime = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (datetime != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (datetime != null)
            {
                builder.Add(new Attr("datetime", datetime));
            }

            return new TagBuilder("time", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(params Attr[] attrs)
        {
            return time(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("time", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1, Attr attr2)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a time element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder time(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("time", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(params Html[] children)
        {
            return time_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(List<Html> children)
        {
            return time_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(ImmutableList<Html> children)
        {
            return time_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return time_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a time element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html time_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("time", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            bool reversed = false,
            string start = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (reversed)
            {
                attrCount++;
            }
            if (start != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (reversed)
            {
                builder.Add(new Attr("reversed"));
            }
            if (start != null)
            {
                builder.Add(new Attr("start", start));
            }

            return new TagBuilder("ol", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(params Attr[] attrs)
        {
            return ol(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("ol", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1, Attr attr2)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an ol element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ol(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("ol", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(params Html[] children)
        {
            return ol_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(List<Html> children)
        {
            return ol_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(ImmutableList<Html> children)
        {
            return ol_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return ol_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an ol element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ol_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("ol", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            bool reversed = false,
            string start = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (reversed)
            {
                attrCount++;
            }
            if (start != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (reversed)
            {
                builder.Add(new Attr("reversed"));
            }
            if (start != null)
            {
                builder.Add(new Attr("start", start));
            }

            return new TagBuilder("ul", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(params Attr[] attrs)
        {
            return ul(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("ul", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1, Attr attr2)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an ul element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder ul(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("ul", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(params Html[] children)
        {
            return ul_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(List<Html> children)
        {
            return ul_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(ImmutableList<Html> children)
        {
            return ul_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return ul_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an ul element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html ul_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("ul", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string value = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }

            return new TagBuilder("li", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(params Attr[] attrs)
        {
            return li(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("li", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1, Attr attr2)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an li element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder li(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("li", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(params Html[] children)
        {
            return li_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(List<Html> children)
        {
            return li_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(ImmutableList<Html> children)
        {
            return li_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return li_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an li element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html li_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("li", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("dl", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(params Attr[] attrs)
        {
            return dl(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("dl", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1, Attr attr2)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a dl element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dl(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("dl", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(params Html[] children)
        {
            return dl_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(List<Html> children)
        {
            return dl_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(ImmutableList<Html> children)
        {
            return dl_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return dl_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a dl element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dl_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("dl", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("dt", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(params Attr[] attrs)
        {
            return dt(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("dt", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1, Attr attr2)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a dt element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dt(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("dt", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(params Html[] children)
        {
            return dt_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(List<Html> children)
        {
            return dt_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(ImmutableList<Html> children)
        {
            return dt_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return dt_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a dt element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dt_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("dt", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("dd", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(params Attr[] attrs)
        {
            return dd(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("dd", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1, Attr attr2)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a dd element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dd(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("dd", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(params Html[] children)
        {
            return dd_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(List<Html> children)
        {
            return dd_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(ImmutableList<Html> children)
        {
            return dd_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return dd_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a dd element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dd_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("dd", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("table", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(params Attr[] attrs)
        {
            return table(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("table", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1, Attr attr2)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a table element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder table(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("table", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(params Html[] children)
        {
            return table_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(List<Html> children)
        {
            return table_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(ImmutableList<Html> children)
        {
            return table_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return table_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a table element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html table_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("table", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("caption", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(params Attr[] attrs)
        {
            return caption(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("caption", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1, Attr attr2)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a caption element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder caption(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("caption", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(params Html[] children)
        {
            return caption_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(List<Html> children)
        {
            return caption_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(ImmutableList<Html> children)
        {
            return caption_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return caption_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a caption element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html caption_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("caption", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("thead", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(params Attr[] attrs)
        {
            return thead(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("thead", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1, Attr attr2)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a thead element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder thead(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("thead", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(params Html[] children)
        {
            return thead_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(List<Html> children)
        {
            return thead_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(ImmutableList<Html> children)
        {
            return thead_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return thead_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a thead element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html thead_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("thead", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string span = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (span != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (span != null)
            {
                builder.Add(new Attr("span", span));
            }

            return new TagBuilder("colgroup", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(params Attr[] attrs)
        {
            return colgroup(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("colgroup", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1, Attr attr2)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a colgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder colgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("colgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(params Html[] children)
        {
            return colgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(List<Html> children)
        {
            return colgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(ImmutableList<Html> children)
        {
            return colgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return colgroup_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a colgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html colgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("colgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string span = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (span != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (span != null)
            {
                builder.Add(new Attr("span", span));
            }

            return new TagBuilder("col", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(params Attr[] attrs)
        {
            return col(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("col", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1, Attr attr2)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a col element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder col(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("col", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(params Html[] children)
        {
            return col_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(List<Html> children)
        {
            return col_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(ImmutableList<Html> children)
        {
            return col_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return col_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a col element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html col_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("col", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("tbody", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(params Attr[] attrs)
        {
            return tbody(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("tbody", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1, Attr attr2)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a tbody element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tbody(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("tbody", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(params Html[] children)
        {
            return tbody_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(List<Html> children)
        {
            return tbody_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(ImmutableList<Html> children)
        {
            return tbody_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return tbody_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a tbody element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tbody_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("tbody", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("tr", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(params Attr[] attrs)
        {
            return tr(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("tr", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1, Attr attr2)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a tr element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tr(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("tr", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(params Html[] children)
        {
            return tr_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(List<Html> children)
        {
            return tr_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(ImmutableList<Html> children)
        {
            return tr_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return tr_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a tr element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tr_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("tr", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string colspan = null,
            string rowspan = null,
            string headers = null,
            string scope = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (colspan != null)
            {
                attrCount++;
            }
            if (rowspan != null)
            {
                attrCount++;
            }
            if (headers != null)
            {
                attrCount++;
            }
            if (scope != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (colspan != null)
            {
                builder.Add(new Attr("colspan", colspan));
            }
            if (rowspan != null)
            {
                builder.Add(new Attr("rowspan", rowspan));
            }
            if (headers != null)
            {
                builder.Add(new Attr("headers", headers));
            }
            if (scope != null)
            {
                builder.Add(new Attr("scope", scope));
            }

            return new TagBuilder("th", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(params Attr[] attrs)
        {
            return th(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("th", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1, Attr attr2)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a th element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder th(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("th", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(params Html[] children)
        {
            return th_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(List<Html> children)
        {
            return th_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(ImmutableList<Html> children)
        {
            return th_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return th_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a th element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html th_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("th", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string colspan = null,
            string rowspan = null,
            string headers = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (colspan != null)
            {
                attrCount++;
            }
            if (rowspan != null)
            {
                attrCount++;
            }
            if (headers != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (colspan != null)
            {
                builder.Add(new Attr("colspan", colspan));
            }
            if (rowspan != null)
            {
                builder.Add(new Attr("rowspan", rowspan));
            }
            if (headers != null)
            {
                builder.Add(new Attr("headers", headers));
            }

            return new TagBuilder("td", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(params Attr[] attrs)
        {
            return td(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("td", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1, Attr attr2)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a td element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder td(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("td", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(params Html[] children)
        {
            return td_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(List<Html> children)
        {
            return td_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(ImmutableList<Html> children)
        {
            return td_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return td_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a td element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html td_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("td", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("tfoot", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(params Attr[] attrs)
        {
            return tfoot(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("tfoot", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1, Attr attr2)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a tfoot element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder tfoot(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("tfoot", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(params Html[] children)
        {
            return tfoot_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(List<Html> children)
        {
            return tfoot_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(ImmutableList<Html> children)
        {
            return tfoot_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return tfoot_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a tfoot element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html tfoot_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("tfoot", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string name = null,
            string action = null,
            string method = null,
            string autocomplete = null,
            string target = null,
            string enctype = null,
            bool novalidate = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (action != null)
            {
                attrCount++;
            }
            if (method != null)
            {
                attrCount++;
            }
            if (autocomplete != null)
            {
                attrCount++;
            }
            if (target != null)
            {
                attrCount++;
            }
            if (enctype != null)
            {
                attrCount++;
            }
            if (novalidate)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (action != null)
            {
                builder.Add(new Attr("action", action));
            }
            if (method != null)
            {
                builder.Add(new Attr("method", method));
            }
            if (autocomplete != null)
            {
                builder.Add(new Attr("autocomplete", autocomplete));
            }
            if (target != null)
            {
                builder.Add(new Attr("target", target));
            }
            if (enctype != null)
            {
                builder.Add(new Attr("enctype", enctype));
            }
            if (novalidate)
            {
                builder.Add(new Attr("novalidate"));
            }

            return new TagBuilder("form", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(params Attr[] attrs)
        {
            return form(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("form", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1, Attr attr2)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a form element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder form(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("form", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(params Html[] children)
        {
            return form_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(List<Html> children)
        {
            return form_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(ImmutableList<Html> children)
        {
            return form_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return form_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a form element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html form_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("form", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string name = null,
            bool disabled = false,
            string form = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }
            if (form != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }
            if (form != null)
            {
                builder.Add(new Attr("form", form));
            }

            return new TagBuilder("fieldset", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(params Attr[] attrs)
        {
            return fieldset(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("fieldset", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1, Attr attr2)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a fieldset element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder fieldset(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("fieldset", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(params Html[] children)
        {
            return fieldset_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(List<Html> children)
        {
            return fieldset_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(ImmutableList<Html> children)
        {
            return fieldset_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return fieldset_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a fieldset element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html fieldset_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("fieldset", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string @for = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (@for != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (@for != null)
            {
                builder.Add(new Attr("for", @for));
            }

            return new TagBuilder("label", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(params Attr[] attrs)
        {
            return label(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("label", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1, Attr attr2)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a label element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder label(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("label", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(params Html[] children)
        {
            return label_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(List<Html> children)
        {
            return label_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(ImmutableList<Html> children)
        {
            return label_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return label_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a label element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html label_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("label", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string name = null,
            string type = null,
            string multiple = null,
            string value = null,
            string placeholder = null,
            string size = null,
            string autocomplete = null,
            string list = null,
            bool autofocus = false,
            bool @checked = false,
            bool disabled = false,
            bool @readonly = false,
            bool required = false,
            string src = null,
            string height = null,
            string width = null,
            string max = null,
            string min = null,
            string step = null,
            string maxlength = null,
            string minlength = null,
            string pattern = null,
            string form = null,
            string formaction = null,
            string formmethod = null,
            string formtarget = null,
            string formenctype = null,
            bool formnovalidate = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (multiple != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }
            if (placeholder != null)
            {
                attrCount++;
            }
            if (size != null)
            {
                attrCount++;
            }
            if (autocomplete != null)
            {
                attrCount++;
            }
            if (list != null)
            {
                attrCount++;
            }
            if (autofocus)
            {
                attrCount++;
            }
            if (@checked)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }
            if (@readonly)
            {
                attrCount++;
            }
            if (required)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (height != null)
            {
                attrCount++;
            }
            if (width != null)
            {
                attrCount++;
            }
            if (max != null)
            {
                attrCount++;
            }
            if (min != null)
            {
                attrCount++;
            }
            if (step != null)
            {
                attrCount++;
            }
            if (maxlength != null)
            {
                attrCount++;
            }
            if (minlength != null)
            {
                attrCount++;
            }
            if (pattern != null)
            {
                attrCount++;
            }
            if (form != null)
            {
                attrCount++;
            }
            if (formaction != null)
            {
                attrCount++;
            }
            if (formmethod != null)
            {
                attrCount++;
            }
            if (formtarget != null)
            {
                attrCount++;
            }
            if (formenctype != null)
            {
                attrCount++;
            }
            if (formnovalidate)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (multiple != null)
            {
                builder.Add(new Attr("multiple", multiple));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }
            if (placeholder != null)
            {
                builder.Add(new Attr("placeholder", placeholder));
            }
            if (size != null)
            {
                builder.Add(new Attr("size", size));
            }
            if (autocomplete != null)
            {
                builder.Add(new Attr("autocomplete", autocomplete));
            }
            if (list != null)
            {
                builder.Add(new Attr("list", list));
            }
            if (autofocus)
            {
                builder.Add(new Attr("autofocus"));
            }
            if (@checked)
            {
                builder.Add(new Attr("checked"));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }
            if (@readonly)
            {
                builder.Add(new Attr("readonly"));
            }
            if (required)
            {
                builder.Add(new Attr("required"));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (height != null)
            {
                builder.Add(new Attr("height", height));
            }
            if (width != null)
            {
                builder.Add(new Attr("width", width));
            }
            if (max != null)
            {
                builder.Add(new Attr("max", max));
            }
            if (min != null)
            {
                builder.Add(new Attr("min", min));
            }
            if (step != null)
            {
                builder.Add(new Attr("step", step));
            }
            if (maxlength != null)
            {
                builder.Add(new Attr("maxlength", maxlength));
            }
            if (minlength != null)
            {
                builder.Add(new Attr("minlength", minlength));
            }
            if (pattern != null)
            {
                builder.Add(new Attr("pattern", pattern));
            }
            if (form != null)
            {
                builder.Add(new Attr("form", form));
            }
            if (formaction != null)
            {
                builder.Add(new Attr("formaction", formaction));
            }
            if (formmethod != null)
            {
                builder.Add(new Attr("formmethod", formmethod));
            }
            if (formtarget != null)
            {
                builder.Add(new Attr("formtarget", formtarget));
            }
            if (formenctype != null)
            {
                builder.Add(new Attr("formenctype", formenctype));
            }
            if (formnovalidate)
            {
                builder.Add(new Attr("formnovalidate"));
            }

            return new TagBuilder("input", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(params Attr[] attrs)
        {
            return input(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("input", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1, Attr attr2)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an input element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder input(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("input", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(params Html[] children)
        {
            return input_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(List<Html> children)
        {
            return input_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(ImmutableList<Html> children)
        {
            return input_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return input_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an input element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html input_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("input", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string name = null,
            string type = null,
            string value = null,
            bool autofocus = false,
            bool disabled = false,
            string src = null,
            string height = null,
            string width = null,
            string form = null,
            string formaction = null,
            string formmethod = null,
            string formtarget = null,
            string formenctype = null,
            bool formnovalidate = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }
            if (autofocus)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (height != null)
            {
                attrCount++;
            }
            if (width != null)
            {
                attrCount++;
            }
            if (form != null)
            {
                attrCount++;
            }
            if (formaction != null)
            {
                attrCount++;
            }
            if (formmethod != null)
            {
                attrCount++;
            }
            if (formtarget != null)
            {
                attrCount++;
            }
            if (formenctype != null)
            {
                attrCount++;
            }
            if (formnovalidate)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }
            if (autofocus)
            {
                builder.Add(new Attr("autofocus"));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (height != null)
            {
                builder.Add(new Attr("height", height));
            }
            if (width != null)
            {
                builder.Add(new Attr("width", width));
            }
            if (form != null)
            {
                builder.Add(new Attr("form", form));
            }
            if (formaction != null)
            {
                builder.Add(new Attr("formaction", formaction));
            }
            if (formmethod != null)
            {
                builder.Add(new Attr("formmethod", formmethod));
            }
            if (formtarget != null)
            {
                builder.Add(new Attr("formtarget", formtarget));
            }
            if (formenctype != null)
            {
                builder.Add(new Attr("formenctype", formenctype));
            }
            if (formnovalidate)
            {
                builder.Add(new Attr("formnovalidate"));
            }

            return new TagBuilder("button", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(params Attr[] attrs)
        {
            return button(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("button", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1, Attr attr2)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a button element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder button(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("button", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(params Html[] children)
        {
            return button_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(List<Html> children)
        {
            return button_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(ImmutableList<Html> children)
        {
            return button_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return button_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a button element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html button_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("button", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string name = null,
            string placeholder = null,
            string autocomplete = null,
            string cols = null,
            string rows = null,
            string wrap = null,
            bool autofocus = false,
            bool disabled = false,
            bool @readonly = false,
            bool required = false,
            string src = null,
            string maxlength = null,
            string minlength = null,
            string form = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (placeholder != null)
            {
                attrCount++;
            }
            if (autocomplete != null)
            {
                attrCount++;
            }
            if (cols != null)
            {
                attrCount++;
            }
            if (rows != null)
            {
                attrCount++;
            }
            if (wrap != null)
            {
                attrCount++;
            }
            if (autofocus)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }
            if (@readonly)
            {
                attrCount++;
            }
            if (required)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (maxlength != null)
            {
                attrCount++;
            }
            if (minlength != null)
            {
                attrCount++;
            }
            if (form != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (placeholder != null)
            {
                builder.Add(new Attr("placeholder", placeholder));
            }
            if (autocomplete != null)
            {
                builder.Add(new Attr("autocomplete", autocomplete));
            }
            if (cols != null)
            {
                builder.Add(new Attr("cols", cols));
            }
            if (rows != null)
            {
                builder.Add(new Attr("rows", rows));
            }
            if (wrap != null)
            {
                builder.Add(new Attr("wrap", wrap));
            }
            if (autofocus)
            {
                builder.Add(new Attr("autofocus"));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }
            if (@readonly)
            {
                builder.Add(new Attr("readonly"));
            }
            if (required)
            {
                builder.Add(new Attr("required"));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (maxlength != null)
            {
                builder.Add(new Attr("maxlength", maxlength));
            }
            if (minlength != null)
            {
                builder.Add(new Attr("minlength", minlength));
            }
            if (form != null)
            {
                builder.Add(new Attr("form", form));
            }

            return new TagBuilder("textarea", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(params Attr[] attrs)
        {
            return textarea(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("textarea", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1, Attr attr2)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a textarea element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder textarea(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("textarea", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(params Html[] children)
        {
            return textarea_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(List<Html> children)
        {
            return textarea_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(ImmutableList<Html> children)
        {
            return textarea_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return textarea_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a textarea element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html textarea_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("textarea", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("datalist", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(params Attr[] attrs)
        {
            return datalist(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("datalist", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1, Attr attr2)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a datalist element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder datalist(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("datalist", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(params Html[] children)
        {
            return datalist_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(List<Html> children)
        {
            return datalist_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(ImmutableList<Html> children)
        {
            return datalist_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return datalist_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a datalist element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html datalist_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("datalist", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string label = null,
            bool disabled = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (label != null)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (label != null)
            {
                builder.Add(new Attr("label", label));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }

            return new TagBuilder("optgroup", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(params Attr[] attrs)
        {
            return optgroup(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("optgroup", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1, Attr attr2)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an optgroup element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder optgroup(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("optgroup", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(params Html[] children)
        {
            return optgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(List<Html> children)
        {
            return optgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(ImmutableList<Html> children)
        {
            return optgroup_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return optgroup_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an optgroup element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html optgroup_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("optgroup", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string name = null,
            string multiple = null,
            string size = null,
            bool autofocus = false,
            bool disabled = false,
            bool required = false,
            string form = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (multiple != null)
            {
                attrCount++;
            }
            if (size != null)
            {
                attrCount++;
            }
            if (autofocus)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }
            if (required)
            {
                attrCount++;
            }
            if (form != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (multiple != null)
            {
                builder.Add(new Attr("multiple", multiple));
            }
            if (size != null)
            {
                builder.Add(new Attr("size", size));
            }
            if (autofocus)
            {
                builder.Add(new Attr("autofocus"));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }
            if (required)
            {
                builder.Add(new Attr("required"));
            }
            if (form != null)
            {
                builder.Add(new Attr("form", form));
            }

            return new TagBuilder("select", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(params Attr[] attrs)
        {
            return select(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("select", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1, Attr attr2)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a select element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder select(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("select", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(params Html[] children)
        {
            return select_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(List<Html> children)
        {
            return select_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(ImmutableList<Html> children)
        {
            return select_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return select_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a select element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html select_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("select", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string label = null,
            string value = null,
            bool disabled = false,
            bool selected = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (label != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }
            if (selected)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (label != null)
            {
                builder.Add(new Attr("label", label));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }
            if (selected)
            {
                builder.Add(new Attr("selected"));
            }

            return new TagBuilder("option", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(params Attr[] attrs)
        {
            return option(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("option", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1, Attr attr2)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an option element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder option(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("option", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(params Html[] children)
        {
            return option_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(List<Html> children)
        {
            return option_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(ImmutableList<Html> children)
        {
            return option_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return option_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an option element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html option_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("option", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("legend", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(params Attr[] attrs)
        {
            return legend(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("legend", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1, Attr attr2)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a legend element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder legend(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("legend", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(params Html[] children)
        {
            return legend_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(List<Html> children)
        {
            return legend_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(ImmutableList<Html> children)
        {
            return legend_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return legend_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a legend element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html legend_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("legend", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string value = null,
            string form = null,
            string max = null,
            string min = null,
            string low = null,
            string high = null,
            string optimum = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }
            if (form != null)
            {
                attrCount++;
            }
            if (max != null)
            {
                attrCount++;
            }
            if (min != null)
            {
                attrCount++;
            }
            if (low != null)
            {
                attrCount++;
            }
            if (high != null)
            {
                attrCount++;
            }
            if (optimum != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }
            if (form != null)
            {
                builder.Add(new Attr("form", form));
            }
            if (max != null)
            {
                builder.Add(new Attr("max", max));
            }
            if (min != null)
            {
                builder.Add(new Attr("min", min));
            }
            if (low != null)
            {
                builder.Add(new Attr("low", low));
            }
            if (high != null)
            {
                builder.Add(new Attr("high", high));
            }
            if (optimum != null)
            {
                builder.Add(new Attr("optimum", optimum));
            }

            return new TagBuilder("meter", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(params Attr[] attrs)
        {
            return meter(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("meter", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1, Attr attr2)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a meter element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder meter(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("meter", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(params Html[] children)
        {
            return meter_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(List<Html> children)
        {
            return meter_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(ImmutableList<Html> children)
        {
            return meter_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return meter_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a meter element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html meter_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("meter", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string @for = null,
            string name = null,
            string form = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (@for != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (form != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (@for != null)
            {
                builder.Add(new Attr("for", @for));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (form != null)
            {
                builder.Add(new Attr("form", form));
            }

            return new TagBuilder("output", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(params Attr[] attrs)
        {
            return output(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("output", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1, Attr attr2)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an output element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder output(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("output", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(params Html[] children)
        {
            return output_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(List<Html> children)
        {
            return output_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(ImmutableList<Html> children)
        {
            return output_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return output_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an output element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html output_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("output", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string value = null,
            string max = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }
            if (max != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }
            if (max != null)
            {
                builder.Add(new Attr("max", max));
            }

            return new TagBuilder("progress", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(params Attr[] attrs)
        {
            return progress(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("progress", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1, Attr attr2)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a progress element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder progress(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("progress", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(params Html[] children)
        {
            return progress_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(List<Html> children)
        {
            return progress_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(ImmutableList<Html> children)
        {
            return progress_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return progress_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a progress element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html progress_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("progress", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            string label = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (label != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (label != null)
            {
                builder.Add(new Attr("label", label));
            }

            return new TagBuilder("menu", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(params Attr[] attrs)
        {
            return menu(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("menu", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1, Attr attr2)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a menu element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menu(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("menu", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(params Html[] children)
        {
            return menu_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(List<Html> children)
        {
            return menu_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(ImmutableList<Html> children)
        {
            return menu_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return menu_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a menu element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menu_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("menu", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            string label = null,
            string command = null,
            string icon = null,
            string radiogroup = null,
            bool disabled = false,
            bool @default = false,
            bool @checked = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (label != null)
            {
                attrCount++;
            }
            if (command != null)
            {
                attrCount++;
            }
            if (icon != null)
            {
                attrCount++;
            }
            if (radiogroup != null)
            {
                attrCount++;
            }
            if (disabled)
            {
                attrCount++;
            }
            if (@default)
            {
                attrCount++;
            }
            if (@checked)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (label != null)
            {
                builder.Add(new Attr("label", label));
            }
            if (command != null)
            {
                builder.Add(new Attr("command", command));
            }
            if (icon != null)
            {
                builder.Add(new Attr("icon", icon));
            }
            if (radiogroup != null)
            {
                builder.Add(new Attr("radiogroup", radiogroup));
            }
            if (disabled)
            {
                builder.Add(new Attr("disabled"));
            }
            if (@default)
            {
                builder.Add(new Attr("default"));
            }
            if (@checked)
            {
                builder.Add(new Attr("checked"));
            }

            return new TagBuilder("menuitem", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(params Attr[] attrs)
        {
            return menuitem(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("menuitem", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1, Attr attr2)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a menuitem element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder menuitem(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("menuitem", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(params Html[] children)
        {
            return menuitem_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(List<Html> children)
        {
            return menuitem_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(ImmutableList<Html> children)
        {
            return menuitem_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return menuitem_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a menuitem element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html menuitem_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("menuitem", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            bool open = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (open)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (open)
            {
                builder.Add(new Attr("open"));
            }

            return new TagBuilder("dialog", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(params Attr[] attrs)
        {
            return dialog(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("dialog", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1, Attr attr2)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a dialog element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder dialog(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("dialog", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(params Html[] children)
        {
            return dialog_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(List<Html> children)
        {
            return dialog_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(ImmutableList<Html> children)
        {
            return dialog_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return dialog_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a dialog element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html dialog_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("dialog", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            bool open = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (open)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (open)
            {
                builder.Add(new Attr("open"));
            }

            return new TagBuilder("details", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(params Attr[] attrs)
        {
            return details(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("details", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1, Attr attr2)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a details element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder details(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("details", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(params Html[] children)
        {
            return details_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(List<Html> children)
        {
            return details_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(ImmutableList<Html> children)
        {
            return details_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return details_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a details element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html details_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("details", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("summary", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(params Attr[] attrs)
        {
            return summary(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("summary", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1, Attr attr2)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a summary element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder summary(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("summary", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(params Html[] children)
        {
            return summary_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(List<Html> children)
        {
            return summary_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(ImmutableList<Html> children)
        {
            return summary_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return summary_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a summary element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html summary_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("summary", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string src = null,
            string alt = null,
            string height = null,
            string width = null,
            string srcset = null,
            string sizes = null,
            string crossorigin = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (alt != null)
            {
                attrCount++;
            }
            if (height != null)
            {
                attrCount++;
            }
            if (width != null)
            {
                attrCount++;
            }
            if (srcset != null)
            {
                attrCount++;
            }
            if (sizes != null)
            {
                attrCount++;
            }
            if (crossorigin != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (alt != null)
            {
                builder.Add(new Attr("alt", alt));
            }
            if (height != null)
            {
                builder.Add(new Attr("height", height));
            }
            if (width != null)
            {
                builder.Add(new Attr("width", width));
            }
            if (srcset != null)
            {
                builder.Add(new Attr("srcset", srcset));
            }
            if (sizes != null)
            {
                builder.Add(new Attr("sizes", sizes));
            }
            if (crossorigin != null)
            {
                builder.Add(new Attr("crossorigin", crossorigin));
            }

            return new SelfClosingTag("img", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(params Attr[] attrs)
            => img(attrs.AsEnumerable());

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("img", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an img element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html img(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("img", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string src = null,
            string preload = null,
            string volume = null,
            bool autoplay = false,
            bool loop = false,
            bool muted = false,
            bool controls = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (preload != null)
            {
                attrCount++;
            }
            if (volume != null)
            {
                attrCount++;
            }
            if (autoplay)
            {
                attrCount++;
            }
            if (loop)
            {
                attrCount++;
            }
            if (muted)
            {
                attrCount++;
            }
            if (controls)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (preload != null)
            {
                builder.Add(new Attr("preload", preload));
            }
            if (volume != null)
            {
                builder.Add(new Attr("volume", volume));
            }
            if (autoplay)
            {
                builder.Add(new Attr("autoplay"));
            }
            if (loop)
            {
                builder.Add(new Attr("loop"));
            }
            if (muted)
            {
                builder.Add(new Attr("muted"));
            }
            if (controls)
            {
                builder.Add(new Attr("controls"));
            }

            return new TagBuilder("audio", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(params Attr[] attrs)
        {
            return audio(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("audio", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1, Attr attr2)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an audio element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder audio(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("audio", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(params Html[] children)
        {
            return audio_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(List<Html> children)
        {
            return audio_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(ImmutableList<Html> children)
        {
            return audio_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return audio_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an audio element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html audio_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("audio", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string src = null,
            string height = null,
            string width = null,
            string poster = null,
            string preload = null,
            bool autoplay = false,
            bool loop = false,
            bool muted = false,
            bool controls = false,
            string crossorigin = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (height != null)
            {
                attrCount++;
            }
            if (width != null)
            {
                attrCount++;
            }
            if (poster != null)
            {
                attrCount++;
            }
            if (preload != null)
            {
                attrCount++;
            }
            if (autoplay)
            {
                attrCount++;
            }
            if (loop)
            {
                attrCount++;
            }
            if (muted)
            {
                attrCount++;
            }
            if (controls)
            {
                attrCount++;
            }
            if (crossorigin != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (height != null)
            {
                builder.Add(new Attr("height", height));
            }
            if (width != null)
            {
                builder.Add(new Attr("width", width));
            }
            if (poster != null)
            {
                builder.Add(new Attr("poster", poster));
            }
            if (preload != null)
            {
                builder.Add(new Attr("preload", preload));
            }
            if (autoplay)
            {
                builder.Add(new Attr("autoplay"));
            }
            if (loop)
            {
                builder.Add(new Attr("loop"));
            }
            if (muted)
            {
                builder.Add(new Attr("muted"));
            }
            if (controls)
            {
                builder.Add(new Attr("controls"));
            }
            if (crossorigin != null)
            {
                builder.Add(new Attr("crossorigin", crossorigin));
            }

            return new TagBuilder("video", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(params Attr[] attrs)
        {
            return video(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("video", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1, Attr attr2)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a video element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder video(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("video", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(params Html[] children)
        {
            return video_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(List<Html> children)
        {
            return video_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(ImmutableList<Html> children)
        {
            return video_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return video_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a video element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html video_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("video", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string src = null,
            string label = null,
            string kind = null,
            bool @default = false
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (label != null)
            {
                attrCount++;
            }
            if (kind != null)
            {
                attrCount++;
            }
            if (@default)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (label != null)
            {
                builder.Add(new Attr("label", label));
            }
            if (kind != null)
            {
                builder.Add(new Attr("kind", kind));
            }
            if (@default)
            {
                builder.Add(new Attr("default"));
            }

            return new SelfClosingTag("track", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(params Attr[] attrs)
            => track(attrs.AsEnumerable());

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("track", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a track element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html track(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("track", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            string src = null,
            string height = null,
            string width = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }
            if (height != null)
            {
                attrCount++;
            }
            if (width != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }
            if (height != null)
            {
                builder.Add(new Attr("height", height));
            }
            if (width != null)
            {
                builder.Add(new Attr("width", width));
            }

            return new SelfClosingTag("embed", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(params Attr[] attrs)
            => embed(attrs.AsEnumerable());

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("embed", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an embed element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html embed(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("embed", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            string data = null,
            string height = null,
            string width = null,
            string name = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (data != null)
            {
                attrCount++;
            }
            if (height != null)
            {
                attrCount++;
            }
            if (width != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (data != null)
            {
                builder.Add(new Attr("data", data));
            }
            if (height != null)
            {
                builder.Add(new Attr("height", height));
            }
            if (width != null)
            {
                builder.Add(new Attr("width", width));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }

            return new TagBuilder("object", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(params Attr[] attrs)
        {
            return @object(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("object", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1, Attr attr2)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build an object element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder @object(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("object", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(params Html[] children)
        {
            return @object_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(List<Html> children)
        {
            return @object_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(ImmutableList<Html> children)
        {
            return @object_(children.AsEnumerable());
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return @object_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build an object element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html @object_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("object", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string name = null,
            string value = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (name != null)
            {
                attrCount++;
            }
            if (value != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (name != null)
            {
                builder.Add(new Attr("name", name));
            }
            if (value != null)
            {
                builder.Add(new Attr("value", value));
            }

            return new SelfClosingTag("param", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(params Attr[] attrs)
            => param(attrs.AsEnumerable());

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("param", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a param element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html param(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("param", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }

            return new TagBuilder("picture", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(params Attr[] attrs)
        {
            return picture(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("picture", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1, Attr attr2)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a picture element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder picture(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("picture", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(params Html[] children)
        {
            return picture_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(List<Html> children)
        {
            return picture_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(ImmutableList<Html> children)
        {
            return picture_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return picture_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a picture element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html picture_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("picture", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string type = null,
            string src = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (type != null)
            {
                attrCount++;
            }
            if (src != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (type != null)
            {
                builder.Add(new Attr("type", type));
            }
            if (src != null)
            {
                builder.Add(new Attr("src", src));
            }

            return new SelfClosingTag("source", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(params Attr[] attrs)
            => source(attrs.AsEnumerable());

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new SelfClosingTag("source", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1, Attr attr2)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1, Attr attr2, Attr attr3)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a source element.
        /// </summary>
        /// <returns>The element</returns>
        public static Html source(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new SelfClosingTag("source", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string height = null,
            string width = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (height != null)
            {
                attrCount++;
            }
            if (width != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (height != null)
            {
                builder.Add(new Attr("height", height));
            }
            if (width != null)
            {
                builder.Add(new Attr("width", width));
            }

            return new TagBuilder("canvas", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(params Attr[] attrs)
        {
            return canvas(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("canvas", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1, Attr attr2)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a canvas element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder canvas(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("canvas", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(params Html[] children)
        {
            return canvas_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(List<Html> children)
        {
            return canvas_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(ImmutableList<Html> children)
        {
            return canvas_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return canvas_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a canvas element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html canvas_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("canvas", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string dir = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (dir != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (dir != null)
            {
                builder.Add(new Attr("dir", dir));
            }

            return new TagBuilder("bdi", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(params Attr[] attrs)
        {
            return bdi(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("bdi", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1, Attr attr2)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a bdi element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdi(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("bdi", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(params Html[] children)
        {
            return bdi_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(List<Html> children)
        {
            return bdi_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(ImmutableList<Html> children)
        {
            return bdi_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return bdi_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a bdi element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdi_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("bdi", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(
            string id = null,
            string @class = null,
            string style = null,
            string title = null,
            string tabindex = null,
            string contenteditable = null,
            string dir = null
        )
        {
            var attrCount = 0;
            
            if (id != null)
            {
                attrCount++;
            }
            if (@class != null)
            {
                attrCount++;
            }
            if (style != null)
            {
                attrCount++;
            }
            if (title != null)
            {
                attrCount++;
            }
            if (tabindex != null)
            {
                attrCount++;
            }
            if (contenteditable != null)
            {
                attrCount++;
            }
            if (dir != null)
            {
                attrCount++;
            }

            var builder = _attrBuilder.Value;
            builder.Capacity = attrCount;
            
            if (id != null)
            {
                builder.Add(new Attr("id", id));
            }
            if (@class != null)
            {
                builder.Add(new Attr("class", @class));
            }
            if (style != null)
            {
                builder.Add(new Attr("style", style));
            }
            if (title != null)
            {
                builder.Add(new Attr("title", title));
            }
            if (tabindex != null)
            {
                builder.Add(new Attr("tabindex", tabindex));
            }
            if (contenteditable != null)
            {
                builder.Add(new Attr("contenteditable", contenteditable));
            }
            if (dir != null)
            {
                builder.Add(new Attr("dir", dir));
            }

            return new TagBuilder("bdo", builder.MoveToImmutable());
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(params Attr[] attrs)
        {
            return bdo(attrs.AsEnumerable());
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(IEnumerable<Attr> attrs)
        {
            if (attrs == null)
            {
                throw new ArgumentNullException(nameof(attrs));
            }
            return new TagBuilder("bdo", attrs.ToImmutableArray());
        }
        
        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1, Attr attr2)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1, attr2));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1, Attr attr2, Attr attr3)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1, attr2, attr3));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1, Attr attr2, Attr attr3, Attr attr4)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7));
        }

        /// <summary>
        /// Build a bdo element.
        /// </summary>
        /// <returns>A <see cref="TagBuilder"/> waiting for the element's children</returns>
        public static TagBuilder bdo(Attr attr1, Attr attr2, Attr attr3, Attr attr4, Attr attr5, Attr attr6, Attr attr7, Attr attr8)
        {
            return new TagBuilder("bdo", ImmutableArrayFactory.Create(attr1, attr2, attr3, attr4, attr5, attr6, attr7, attr8));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(params Html[] children)
        {
            return bdo_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(List<Html> children)
        {
            return bdo_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(ImmutableList<Html> children)
        {
            return bdo_(children.AsEnumerable());
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(IEnumerable<Html> children)
        {
            if (children == null)
            {
                throw new ArgumentNullException(nameof(children));
            }
            return bdo_(children.ToImmutableArray());
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(ImmutableArray<Html> children)
        {
            foreach (var child in children)
            {
                if (child == null)
                {
                    throw new ArgumentNullException(nameof(children));
                }
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), children);
        }
        
        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1, Html child2)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1, Html child2, Html child3)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1, Html child2, Html child3, Html child4)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1, Html child2, Html child3, Html child4, Html child5)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7));
        }

        /// <summary>
        /// Build a bdo element without any attributes.
        /// </summary>
        /// <returns>The element</returns>
        public static Html bdo_(Html child1, Html child2, Html child3, Html child4, Html child5, Html child6, Html child7, Html child8)
        {
            
            if (child1 == null)
            {
                throw new ArgumentNullException(nameof(child1));
            }
            if (child2 == null)
            {
                throw new ArgumentNullException(nameof(child2));
            }
            if (child3 == null)
            {
                throw new ArgumentNullException(nameof(child3));
            }
            if (child4 == null)
            {
                throw new ArgumentNullException(nameof(child4));
            }
            if (child5 == null)
            {
                throw new ArgumentNullException(nameof(child5));
            }
            if (child6 == null)
            {
                throw new ArgumentNullException(nameof(child6));
            }
            if (child7 == null)
            {
                throw new ArgumentNullException(nameof(child7));
            }
            if (child8 == null)
            {
                throw new ArgumentNullException(nameof(child8));
            }
            return new Tag("bdo", ImmutableArray.Create<Attr>(), ImmutableArrayFactory.Create(child1, child2, child3, child4, child5, child6, child7, child8));
        }
    }
}
#endregion
